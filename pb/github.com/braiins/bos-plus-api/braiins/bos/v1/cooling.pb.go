// Copyright (C) 2023  Braiins Systems s.r.o.
//
// This file is part of Braiins Open-Source Initiative (BOSI).
//
// BOSI is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
// Please, keep in mind that we may also license BOSI or any part thereof
// under a proprietary license. For more information on the terms and conditions
// of such proprietary license or if you have any other questions, please
// contact us at opensource@braiins.com.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v5.27.1
// source: bos/v1/cooling.proto

package bos_proto_v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CoolingMode int32

const (
	CoolingMode_COOLING_MODE_UNSPECIFIED CoolingMode = 0
	CoolingMode_COOLING_MODE_AUTO        CoolingMode = 1
	CoolingMode_COOLING_MODE_MANUAL      CoolingMode = 2
	CoolingMode_COOLING_MODE_DISABLED    CoolingMode = 3
)

// Enum value maps for CoolingMode.
var (
	CoolingMode_name = map[int32]string{
		0: "COOLING_MODE_UNSPECIFIED",
		1: "COOLING_MODE_AUTO",
		2: "COOLING_MODE_MANUAL",
		3: "COOLING_MODE_DISABLED",
	}
	CoolingMode_value = map[string]int32{
		"COOLING_MODE_UNSPECIFIED": 0,
		"COOLING_MODE_AUTO":        1,
		"COOLING_MODE_MANUAL":      2,
		"COOLING_MODE_DISABLED":    3,
	}
)

func (x CoolingMode) Enum() *CoolingMode {
	p := new(CoolingMode)
	*p = x
	return p
}

func (x CoolingMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CoolingMode) Descriptor() protoreflect.EnumDescriptor {
	return file_bos_v1_cooling_proto_enumTypes[0].Descriptor()
}

func (CoolingMode) Type() protoreflect.EnumType {
	return &file_bos_v1_cooling_proto_enumTypes[0]
}

func (x CoolingMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CoolingMode.Descriptor instead.
func (CoolingMode) EnumDescriptor() ([]byte, []int) {
	return file_bos_v1_cooling_proto_rawDescGZIP(), []int{0}
}

type SensorLocation int32

const (
	SensorLocation_SENSOR_LOCATION_UNSPECIFIED SensorLocation = 0
	SensorLocation_SENSOR_LOCATION_CHIP        SensorLocation = 1
	SensorLocation_SENSOR_LOCATION_PCB         SensorLocation = 2
)

// Enum value maps for SensorLocation.
var (
	SensorLocation_name = map[int32]string{
		0: "SENSOR_LOCATION_UNSPECIFIED",
		1: "SENSOR_LOCATION_CHIP",
		2: "SENSOR_LOCATION_PCB",
	}
	SensorLocation_value = map[string]int32{
		"SENSOR_LOCATION_UNSPECIFIED": 0,
		"SENSOR_LOCATION_CHIP":        1,
		"SENSOR_LOCATION_PCB":         2,
	}
)

func (x SensorLocation) Enum() *SensorLocation {
	p := new(SensorLocation)
	*p = x
	return p
}

func (x SensorLocation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SensorLocation) Descriptor() protoreflect.EnumDescriptor {
	return file_bos_v1_cooling_proto_enumTypes[1].Descriptor()
}

func (SensorLocation) Type() protoreflect.EnumType {
	return &file_bos_v1_cooling_proto_enumTypes[1]
}

func (x SensorLocation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SensorLocation.Descriptor instead.
func (SensorLocation) EnumDescriptor() ([]byte, []int) {
	return file_bos_v1_cooling_proto_rawDescGZIP(), []int{1}
}

// The temperature control modes.
// Miner software tries to regulate the fan speed so that miner temperature is approximately at the target temperature.
// The allowed temperature range is 0-200 degree Celsius.
type CoolingAutoMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Temperature that the miner will try to maintain
	TargetTemperature *Temperature `protobuf:"bytes,1,opt,name=target_temperature,json=targetTemperature,proto3" json:"target_temperature,omitempty"`
	// Temperature threshold at which the fans start to run at 100%.
	HotTemperature *Temperature `protobuf:"bytes,2,opt,name=hot_temperature,json=hotTemperature,proto3" json:"hot_temperature,omitempty"`
	// Temperature threshold at which BOSMiner shuts down in order to prevent overheating and damaging the miner.
	DangerousTemperature *Temperature `protobuf:"bytes,3,opt,name=dangerous_temperature,json=dangerousTemperature,proto3" json:"dangerous_temperature,omitempty"`
}

func (x *CoolingAutoMode) Reset() {
	*x = CoolingAutoMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_cooling_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoolingAutoMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoolingAutoMode) ProtoMessage() {}

func (x *CoolingAutoMode) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_cooling_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoolingAutoMode.ProtoReflect.Descriptor instead.
func (*CoolingAutoMode) Descriptor() ([]byte, []int) {
	return file_bos_v1_cooling_proto_rawDescGZIP(), []int{0}
}

func (x *CoolingAutoMode) GetTargetTemperature() *Temperature {
	if x != nil {
		return x.TargetTemperature
	}
	return nil
}

func (x *CoolingAutoMode) GetHotTemperature() *Temperature {
	if x != nil {
		return x.HotTemperature
	}
	return nil
}

func (x *CoolingAutoMode) GetDangerousTemperature() *Temperature {
	if x != nil {
		return x.DangerousTemperature
	}
	return nil
}

// Fans are kept at a fixed, user-defined speed, no matter the temperature.
type CoolingManualMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User defined fan speed expressed as a ratio between 0.0 and 1.0
	// where 0.0 means completely turned off and
	// 1.0 means running at full speed possible
	FanSpeedRatio *float64 `protobuf:"fixed64,1,opt,name=fan_speed_ratio,json=fanSpeedRatio,proto3,oneof" json:"fan_speed_ratio,omitempty"`
	// Temperature threshold at which the fans start to run at 100%.
	HotTemperature *Temperature `protobuf:"bytes,2,opt,name=hot_temperature,json=hotTemperature,proto3" json:"hot_temperature,omitempty"`
	// Temperature threshold at which BOSMiner shuts down in order to prevent overheating and damaging the miner.
	DangerousTemperature *Temperature `protobuf:"bytes,3,opt,name=dangerous_temperature,json=dangerousTemperature,proto3" json:"dangerous_temperature,omitempty"`
}

func (x *CoolingManualMode) Reset() {
	*x = CoolingManualMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_cooling_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoolingManualMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoolingManualMode) ProtoMessage() {}

func (x *CoolingManualMode) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_cooling_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoolingManualMode.ProtoReflect.Descriptor instead.
func (*CoolingManualMode) Descriptor() ([]byte, []int) {
	return file_bos_v1_cooling_proto_rawDescGZIP(), []int{1}
}

func (x *CoolingManualMode) GetFanSpeedRatio() float64 {
	if x != nil && x.FanSpeedRatio != nil {
		return *x.FanSpeedRatio
	}
	return 0
}

func (x *CoolingManualMode) GetHotTemperature() *Temperature {
	if x != nil {
		return x.HotTemperature
	}
	return nil
}

func (x *CoolingManualMode) GetDangerousTemperature() *Temperature {
	if x != nil {
		return x.DangerousTemperature
	}
	return nil
}

// Disable temperature control. May be dangerous.
type CoolingDisabledMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User defined fan speed expressed as a ratio between 0.0 and 1.0
	// where 0.0 means completely turned off and
	// 1.0 means running at full speed possible
	FanSpeedRatio *float64 `protobuf:"fixed64,1,opt,name=fan_speed_ratio,json=fanSpeedRatio,proto3,oneof" json:"fan_speed_ratio,omitempty"`
}

func (x *CoolingDisabledMode) Reset() {
	*x = CoolingDisabledMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_cooling_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoolingDisabledMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoolingDisabledMode) ProtoMessage() {}

func (x *CoolingDisabledMode) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_cooling_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoolingDisabledMode.ProtoReflect.Descriptor instead.
func (*CoolingDisabledMode) Descriptor() ([]byte, []int) {
	return file_bos_v1_cooling_proto_rawDescGZIP(), []int{2}
}

func (x *CoolingDisabledMode) GetFanSpeedRatio() float64 {
	if x != nil && x.FanSpeedRatio != nil {
		return *x.FanSpeedRatio
	}
	return 0
}

type CoolingConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinimumRequiredFans *uint32 `protobuf:"varint,1,opt,name=minimum_required_fans,json=minimumRequiredFans,proto3,oneof" json:"minimum_required_fans,omitempty"`
	// Types that are assignable to Mode:
	//
	//	*CoolingConfiguration_Auto
	//	*CoolingConfiguration_Manual
	//	*CoolingConfiguration_Disabled
	Mode isCoolingConfiguration_Mode `protobuf_oneof:"mode"`
}

func (x *CoolingConfiguration) Reset() {
	*x = CoolingConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_cooling_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoolingConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoolingConfiguration) ProtoMessage() {}

func (x *CoolingConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_cooling_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoolingConfiguration.ProtoReflect.Descriptor instead.
func (*CoolingConfiguration) Descriptor() ([]byte, []int) {
	return file_bos_v1_cooling_proto_rawDescGZIP(), []int{3}
}

func (x *CoolingConfiguration) GetMinimumRequiredFans() uint32 {
	if x != nil && x.MinimumRequiredFans != nil {
		return *x.MinimumRequiredFans
	}
	return 0
}

func (m *CoolingConfiguration) GetMode() isCoolingConfiguration_Mode {
	if m != nil {
		return m.Mode
	}
	return nil
}

func (x *CoolingConfiguration) GetAuto() *CoolingAutoMode {
	if x, ok := x.GetMode().(*CoolingConfiguration_Auto); ok {
		return x.Auto
	}
	return nil
}

func (x *CoolingConfiguration) GetManual() *CoolingManualMode {
	if x, ok := x.GetMode().(*CoolingConfiguration_Manual); ok {
		return x.Manual
	}
	return nil
}

func (x *CoolingConfiguration) GetDisabled() *CoolingDisabledMode {
	if x, ok := x.GetMode().(*CoolingConfiguration_Disabled); ok {
		return x.Disabled
	}
	return nil
}

type isCoolingConfiguration_Mode interface {
	isCoolingConfiguration_Mode()
}

type CoolingConfiguration_Auto struct {
	Auto *CoolingAutoMode `protobuf:"bytes,2,opt,name=auto,proto3,oneof"`
}

type CoolingConfiguration_Manual struct {
	Manual *CoolingManualMode `protobuf:"bytes,3,opt,name=manual,proto3,oneof"`
}

type CoolingConfiguration_Disabled struct {
	Disabled *CoolingDisabledMode `protobuf:"bytes,4,opt,name=disabled,proto3,oneof"`
}

func (*CoolingConfiguration_Auto) isCoolingConfiguration_Mode() {}

func (*CoolingConfiguration_Manual) isCoolingConfiguration_Mode() {}

func (*CoolingConfiguration_Disabled) isCoolingConfiguration_Mode() {}

type CoolingConstraints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultCoolingMode   CoolingMode             `protobuf:"varint,1,opt,name=default_cooling_mode,json=defaultCoolingMode,proto3,enum=braiins.bos.v1.CoolingMode" json:"default_cooling_mode,omitempty"`
	TargetTemperature    *TemperatureConstraints `protobuf:"bytes,2,opt,name=target_temperature,json=targetTemperature,proto3" json:"target_temperature,omitempty"`
	HotTemperature       *TemperatureConstraints `protobuf:"bytes,3,opt,name=hot_temperature,json=hotTemperature,proto3" json:"hot_temperature,omitempty"`
	DangerousTemperature *TemperatureConstraints `protobuf:"bytes,4,opt,name=dangerous_temperature,json=dangerousTemperature,proto3" json:"dangerous_temperature,omitempty"`
	FanSpeedRatio        *DoubleConstraints      `protobuf:"bytes,5,opt,name=fan_speed_ratio,json=fanSpeedRatio,proto3" json:"fan_speed_ratio,omitempty"`
	MinimumRequiredFans  *UInt32Constraints      `protobuf:"bytes,6,opt,name=minimum_required_fans,json=minimumRequiredFans,proto3" json:"minimum_required_fans,omitempty"`
}

func (x *CoolingConstraints) Reset() {
	*x = CoolingConstraints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_cooling_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoolingConstraints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoolingConstraints) ProtoMessage() {}

func (x *CoolingConstraints) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_cooling_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoolingConstraints.ProtoReflect.Descriptor instead.
func (*CoolingConstraints) Descriptor() ([]byte, []int) {
	return file_bos_v1_cooling_proto_rawDescGZIP(), []int{4}
}

func (x *CoolingConstraints) GetDefaultCoolingMode() CoolingMode {
	if x != nil {
		return x.DefaultCoolingMode
	}
	return CoolingMode_COOLING_MODE_UNSPECIFIED
}

func (x *CoolingConstraints) GetTargetTemperature() *TemperatureConstraints {
	if x != nil {
		return x.TargetTemperature
	}
	return nil
}

func (x *CoolingConstraints) GetHotTemperature() *TemperatureConstraints {
	if x != nil {
		return x.HotTemperature
	}
	return nil
}

func (x *CoolingConstraints) GetDangerousTemperature() *TemperatureConstraints {
	if x != nil {
		return x.DangerousTemperature
	}
	return nil
}

func (x *CoolingConstraints) GetFanSpeedRatio() *DoubleConstraints {
	if x != nil {
		return x.FanSpeedRatio
	}
	return nil
}

func (x *CoolingConstraints) GetMinimumRequiredFans() *UInt32Constraints {
	if x != nil {
		return x.MinimumRequiredFans
	}
	return nil
}

// Structure which contain info about one specific miner fan.
type FanState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Fan positions/ID
	Position *uint32 `protobuf:"varint,1,opt,name=position,proto3,oneof" json:"position,omitempty"`
	// Actual fan RPM (Revolutions/Rotation Per Minute)
	Rpm uint32 `protobuf:"varint,2,opt,name=rpm,proto3" json:"rpm,omitempty"`
	// Actual fan speed ratio(PWM) in range 0.0 - 1.0
	TargetSpeedRatio *float64 `protobuf:"fixed64,3,opt,name=target_speed_ratio,json=targetSpeedRatio,proto3,oneof" json:"target_speed_ratio,omitempty"`
}

func (x *FanState) Reset() {
	*x = FanState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_cooling_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FanState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FanState) ProtoMessage() {}

func (x *FanState) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_cooling_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FanState.ProtoReflect.Descriptor instead.
func (*FanState) Descriptor() ([]byte, []int) {
	return file_bos_v1_cooling_proto_rawDescGZIP(), []int{5}
}

func (x *FanState) GetPosition() uint32 {
	if x != nil && x.Position != nil {
		return *x.Position
	}
	return 0
}

func (x *FanState) GetRpm() uint32 {
	if x != nil {
		return x.Rpm
	}
	return 0
}

func (x *FanState) GetTargetSpeedRatio() float64 {
	if x != nil && x.TargetSpeedRatio != nil {
		return *x.TargetSpeedRatio
	}
	return 0
}

type TemperatureSensor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sensor id
	Id *uint32 `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	// Sensor location
	Location SensorLocation `protobuf:"varint,2,opt,name=location,proto3,enum=braiins.bos.v1.SensorLocation" json:"location,omitempty"`
	// Temperature
	Temperature *Temperature `protobuf:"bytes,3,opt,name=temperature,proto3" json:"temperature,omitempty"`
}

func (x *TemperatureSensor) Reset() {
	*x = TemperatureSensor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_cooling_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemperatureSensor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemperatureSensor) ProtoMessage() {}

func (x *TemperatureSensor) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_cooling_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemperatureSensor.ProtoReflect.Descriptor instead.
func (*TemperatureSensor) Descriptor() ([]byte, []int) {
	return file_bos_v1_cooling_proto_rawDescGZIP(), []int{6}
}

func (x *TemperatureSensor) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *TemperatureSensor) GetLocation() SensorLocation {
	if x != nil {
		return x.Location
	}
	return SensorLocation_SENSOR_LOCATION_UNSPECIFIED
}

func (x *TemperatureSensor) GetTemperature() *Temperature {
	if x != nil {
		return x.Temperature
	}
	return nil
}

// Request to get current temperature and fans measurements
type GetCoolingStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCoolingStateRequest) Reset() {
	*x = GetCoolingStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_cooling_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoolingStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoolingStateRequest) ProtoMessage() {}

func (x *GetCoolingStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_cooling_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoolingStateRequest.ProtoReflect.Descriptor instead.
func (*GetCoolingStateRequest) Descriptor() ([]byte, []int) {
	return file_bos_v1_cooling_proto_rawDescGZIP(), []int{7}
}

// Response to get current fan states and
// temperature measurements
type GetCoolingStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// All Fans state
	Fans []*FanState `protobuf:"bytes,1,rep,name=fans,proto3" json:"fans,omitempty"`
	// Sensor with current highest temperature
	HighestTemperature *TemperatureSensor `protobuf:"bytes,2,opt,name=highest_temperature,json=highestTemperature,proto3" json:"highest_temperature,omitempty"`
}

func (x *GetCoolingStateResponse) Reset() {
	*x = GetCoolingStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_cooling_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoolingStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoolingStateResponse) ProtoMessage() {}

func (x *GetCoolingStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_cooling_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoolingStateResponse.ProtoReflect.Descriptor instead.
func (*GetCoolingStateResponse) Descriptor() ([]byte, []int) {
	return file_bos_v1_cooling_proto_rawDescGZIP(), []int{8}
}

func (x *GetCoolingStateResponse) GetFans() []*FanState {
	if x != nil {
		return x.Fans
	}
	return nil
}

func (x *GetCoolingStateResponse) GetHighestTemperature() *TemperatureSensor {
	if x != nil {
		return x.HighestTemperature
	}
	return nil
}

// Request to set immersion mode
type SetImmersionModeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SaveAction SaveAction `protobuf:"varint,1,opt,name=save_action,json=saveAction,proto3,enum=braiins.bos.v1.SaveAction" json:"save_action,omitempty"`
	// Flag to enable or disable immersion mode
	EnableImmersionMode bool `protobuf:"varint,2,opt,name=enable_immersion_mode,json=enableImmersionMode,proto3" json:"enable_immersion_mode,omitempty"`
}

func (x *SetImmersionModeRequest) Reset() {
	*x = SetImmersionModeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_cooling_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetImmersionModeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetImmersionModeRequest) ProtoMessage() {}

func (x *SetImmersionModeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_cooling_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetImmersionModeRequest.ProtoReflect.Descriptor instead.
func (*SetImmersionModeRequest) Descriptor() ([]byte, []int) {
	return file_bos_v1_cooling_proto_rawDescGZIP(), []int{9}
}

func (x *SetImmersionModeRequest) GetSaveAction() SaveAction {
	if x != nil {
		return x.SaveAction
	}
	return SaveAction_SAVE_ACTION_UNSPECIFIED
}

func (x *SetImmersionModeRequest) GetEnableImmersionMode() bool {
	if x != nil {
		return x.EnableImmersionMode
	}
	return false
}

// Response for set immersion mode action.
type SetImmersionModeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resulting immersion mode
	ImmersionMode bool `protobuf:"varint,1,opt,name=immersion_mode,json=immersionMode,proto3" json:"immersion_mode,omitempty"`
}

func (x *SetImmersionModeResponse) Reset() {
	*x = SetImmersionModeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_cooling_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetImmersionModeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetImmersionModeResponse) ProtoMessage() {}

func (x *SetImmersionModeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_cooling_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetImmersionModeResponse.ProtoReflect.Descriptor instead.
func (*SetImmersionModeResponse) Descriptor() ([]byte, []int) {
	return file_bos_v1_cooling_proto_rawDescGZIP(), []int{10}
}

func (x *SetImmersionModeResponse) GetImmersionMode() bool {
	if x != nil {
		return x.ImmersionMode
	}
	return false
}

var File_bos_v1_cooling_proto protoreflect.FileDescriptor

var file_bos_v1_cooling_proto_rawDesc = []byte{
	0x0a, 0x14, 0x62, 0x6f, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e,
	0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x13, 0x62, 0x6f, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x62, 0x6f, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x62, 0x6f, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x6e,
	0x69, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf5, 0x01, 0x0a, 0x0f, 0x43, 0x6f,
	0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x74, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x4a, 0x0a,
	0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x72, 0x61, 0x69,
	0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x68, 0x6f, 0x74,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x0e, 0x68, 0x6f, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x50, 0x0a, 0x15, 0x64, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x6f, 0x75, 0x73, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x14, 0x64, 0x61, 0x6e,
	0x67, 0x65, 0x72, 0x6f, 0x75, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x22, 0xec, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x0f, 0x66, 0x61, 0x6e, 0x5f, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x00, 0x52, 0x0d, 0x66, 0x61, 0x6e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x0f, 0x68, 0x6f, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0e, 0x68, 0x6f, 0x74, 0x54,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x50, 0x0a, 0x15, 0x64, 0x61,
	0x6e, 0x67, 0x65, 0x72, 0x6f, 0x75, 0x73, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x72, 0x61, 0x69,
	0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x14, 0x64, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x6f, 0x75,
	0x73, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x66, 0x61, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x22, 0x56, 0x0a, 0x13, 0x43, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x0f, 0x66, 0x61, 0x6e, 0x5f, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x00, 0x52, 0x0d, 0x66, 0x61, 0x6e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x66, 0x61, 0x6e, 0x5f, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x22, 0xa8, 0x02, 0x0a, 0x14, 0x43, 0x6f, 0x6f,
	0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x37, 0x0a, 0x15, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x61, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x01, 0x52, 0x13, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x46, 0x61, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x04, 0x61, 0x75,
	0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69,
	0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6f, 0x6c, 0x69, 0x6e,
	0x67, 0x41, 0x75, 0x74, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x04, 0x61, 0x75, 0x74,
	0x6f, 0x12, 0x3b, 0x0a, 0x06, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x4d, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x06, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x12, 0x41,
	0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x42, 0x06, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6d, 0x69,
	0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x66,
	0x61, 0x6e, 0x73, 0x22, 0x8a, 0x04, 0x0a, 0x12, 0x43, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x4d, 0x0a, 0x14, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69,
	0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6f, 0x6c, 0x69, 0x6e,
	0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x12, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f,
	0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x55, 0x0a, 0x12, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e,
	0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x11, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x4f, 0x0a, 0x0f, 0x68, 0x6f, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x72, 0x61, 0x69,
	0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x73, 0x52, 0x0e, 0x68, 0x6f, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x5b, 0x0a, 0x15, 0x64, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x6f, 0x75, 0x73, 0x5f, 0x74,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x14, 0x64, 0x61, 0x6e, 0x67, 0x65, 0x72,
	0x6f, 0x75, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x49,
	0x0a, 0x0f, 0x66, 0x61, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e,
	0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x0d, 0x66, 0x61, 0x6e, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x55, 0x0a, 0x15, 0x6d, 0x69, 0x6e,
	0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x61,
	0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69,
	0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x13, 0x6d, 0x69, 0x6e,
	0x69, 0x6d, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x46, 0x61, 0x6e, 0x73,
	0x22, 0x94, 0x01, 0x0a, 0x08, 0x46, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x00, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x10,
	0x0a, 0x03, 0x72, 0x70, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x72, 0x70, 0x6d,
	0x12, 0x31, 0x0a, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x10,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x15, 0x0a, 0x13, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x22, 0xaa, 0x01, 0x0a, 0x11, 0x54, 0x65, 0x6d, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x13, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x3a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62,
	0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d,
	0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x05, 0x0a,
	0x03, 0x5f, 0x69, 0x64, 0x22, 0x18, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6f, 0x6c, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x9b,
	0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x66, 0x61,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69,
	0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x04, 0x66, 0x61, 0x6e, 0x73, 0x12, 0x52, 0x0a, 0x13, 0x68, 0x69, 0x67, 0x68,
	0x65, 0x73, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e,
	0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x12, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73,
	0x74, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x8a, 0x01, 0x0a,
	0x17, 0x53, 0x65, 0x74, 0x49, 0x6d, 0x6d, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x73, 0x61, 0x76, 0x65,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x61, 0x76, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x73, 0x61, 0x76, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x69, 0x6d, 0x6d, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6d, 0x6d, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x41, 0x0a, 0x18, 0x53, 0x65, 0x74,
	0x49, 0x6d, 0x6d, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6d, 0x6d, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69,
	0x6d, 0x6d, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x2a, 0x76, 0x0a, 0x0b,
	0x43, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x43,
	0x4f, 0x4f, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x4f,
	0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x01,
	0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4f, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4f,
	0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c,
	0x45, 0x44, 0x10, 0x03, 0x2a, 0x64, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52,
	0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x45, 0x4e, 0x53, 0x4f,
	0x52, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x49, 0x50, 0x10,
	0x01, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x5f, 0x4c, 0x4f, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x43, 0x42, 0x10, 0x02, 0x32, 0xdb, 0x01, 0x0a, 0x0e, 0x43,
	0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x62, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x26, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69,
	0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6f,
	0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x65, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x49, 0x6d, 0x6d, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e,
	0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x49, 0x6d, 0x6d, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x74, 0x49, 0x6d, 0x6d, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2f, 0x62,
	0x6f, 0x73, 0x2d, 0x70, 0x6c, 0x75, 0x73, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x72, 0x61, 0x69,
	0x69, 0x6e, 0x73, 0x2f, 0x62, 0x6f, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x62, 0x6f, 0x73, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bos_v1_cooling_proto_rawDescOnce sync.Once
	file_bos_v1_cooling_proto_rawDescData = file_bos_v1_cooling_proto_rawDesc
)

func file_bos_v1_cooling_proto_rawDescGZIP() []byte {
	file_bos_v1_cooling_proto_rawDescOnce.Do(func() {
		file_bos_v1_cooling_proto_rawDescData = protoimpl.X.CompressGZIP(file_bos_v1_cooling_proto_rawDescData)
	})
	return file_bos_v1_cooling_proto_rawDescData
}

var file_bos_v1_cooling_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_bos_v1_cooling_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_bos_v1_cooling_proto_goTypes = []interface{}{
	(CoolingMode)(0),                 // 0: braiins.bos.v1.CoolingMode
	(SensorLocation)(0),              // 1: braiins.bos.v1.SensorLocation
	(*CoolingAutoMode)(nil),          // 2: braiins.bos.v1.CoolingAutoMode
	(*CoolingManualMode)(nil),        // 3: braiins.bos.v1.CoolingManualMode
	(*CoolingDisabledMode)(nil),      // 4: braiins.bos.v1.CoolingDisabledMode
	(*CoolingConfiguration)(nil),     // 5: braiins.bos.v1.CoolingConfiguration
	(*CoolingConstraints)(nil),       // 6: braiins.bos.v1.CoolingConstraints
	(*FanState)(nil),                 // 7: braiins.bos.v1.FanState
	(*TemperatureSensor)(nil),        // 8: braiins.bos.v1.TemperatureSensor
	(*GetCoolingStateRequest)(nil),   // 9: braiins.bos.v1.GetCoolingStateRequest
	(*GetCoolingStateResponse)(nil),  // 10: braiins.bos.v1.GetCoolingStateResponse
	(*SetImmersionModeRequest)(nil),  // 11: braiins.bos.v1.SetImmersionModeRequest
	(*SetImmersionModeResponse)(nil), // 12: braiins.bos.v1.SetImmersionModeResponse
	(*Temperature)(nil),              // 13: braiins.bos.v1.Temperature
	(*TemperatureConstraints)(nil),   // 14: braiins.bos.v1.TemperatureConstraints
	(*DoubleConstraints)(nil),        // 15: braiins.bos.v1.DoubleConstraints
	(*UInt32Constraints)(nil),        // 16: braiins.bos.v1.UInt32Constraints
	(SaveAction)(0),                  // 17: braiins.bos.v1.SaveAction
}
var file_bos_v1_cooling_proto_depIdxs = []int32{
	13, // 0: braiins.bos.v1.CoolingAutoMode.target_temperature:type_name -> braiins.bos.v1.Temperature
	13, // 1: braiins.bos.v1.CoolingAutoMode.hot_temperature:type_name -> braiins.bos.v1.Temperature
	13, // 2: braiins.bos.v1.CoolingAutoMode.dangerous_temperature:type_name -> braiins.bos.v1.Temperature
	13, // 3: braiins.bos.v1.CoolingManualMode.hot_temperature:type_name -> braiins.bos.v1.Temperature
	13, // 4: braiins.bos.v1.CoolingManualMode.dangerous_temperature:type_name -> braiins.bos.v1.Temperature
	2,  // 5: braiins.bos.v1.CoolingConfiguration.auto:type_name -> braiins.bos.v1.CoolingAutoMode
	3,  // 6: braiins.bos.v1.CoolingConfiguration.manual:type_name -> braiins.bos.v1.CoolingManualMode
	4,  // 7: braiins.bos.v1.CoolingConfiguration.disabled:type_name -> braiins.bos.v1.CoolingDisabledMode
	0,  // 8: braiins.bos.v1.CoolingConstraints.default_cooling_mode:type_name -> braiins.bos.v1.CoolingMode
	14, // 9: braiins.bos.v1.CoolingConstraints.target_temperature:type_name -> braiins.bos.v1.TemperatureConstraints
	14, // 10: braiins.bos.v1.CoolingConstraints.hot_temperature:type_name -> braiins.bos.v1.TemperatureConstraints
	14, // 11: braiins.bos.v1.CoolingConstraints.dangerous_temperature:type_name -> braiins.bos.v1.TemperatureConstraints
	15, // 12: braiins.bos.v1.CoolingConstraints.fan_speed_ratio:type_name -> braiins.bos.v1.DoubleConstraints
	16, // 13: braiins.bos.v1.CoolingConstraints.minimum_required_fans:type_name -> braiins.bos.v1.UInt32Constraints
	1,  // 14: braiins.bos.v1.TemperatureSensor.location:type_name -> braiins.bos.v1.SensorLocation
	13, // 15: braiins.bos.v1.TemperatureSensor.temperature:type_name -> braiins.bos.v1.Temperature
	7,  // 16: braiins.bos.v1.GetCoolingStateResponse.fans:type_name -> braiins.bos.v1.FanState
	8,  // 17: braiins.bos.v1.GetCoolingStateResponse.highest_temperature:type_name -> braiins.bos.v1.TemperatureSensor
	17, // 18: braiins.bos.v1.SetImmersionModeRequest.save_action:type_name -> braiins.bos.v1.SaveAction
	9,  // 19: braiins.bos.v1.CoolingService.GetCoolingState:input_type -> braiins.bos.v1.GetCoolingStateRequest
	11, // 20: braiins.bos.v1.CoolingService.SetImmersionMode:input_type -> braiins.bos.v1.SetImmersionModeRequest
	10, // 21: braiins.bos.v1.CoolingService.GetCoolingState:output_type -> braiins.bos.v1.GetCoolingStateResponse
	12, // 22: braiins.bos.v1.CoolingService.SetImmersionMode:output_type -> braiins.bos.v1.SetImmersionModeResponse
	21, // [21:23] is the sub-list for method output_type
	19, // [19:21] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_bos_v1_cooling_proto_init() }
func file_bos_v1_cooling_proto_init() {
	if File_bos_v1_cooling_proto != nil {
		return
	}
	file_bos_v1_common_proto_init()
	file_bos_v1_constraints_proto_init()
	file_bos_v1_units_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_bos_v1_cooling_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoolingAutoMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_cooling_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoolingManualMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_cooling_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoolingDisabledMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_cooling_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoolingConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_cooling_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoolingConstraints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_cooling_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FanState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_cooling_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemperatureSensor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_cooling_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoolingStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_cooling_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoolingStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_cooling_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetImmersionModeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_cooling_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetImmersionModeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_bos_v1_cooling_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_bos_v1_cooling_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_bos_v1_cooling_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*CoolingConfiguration_Auto)(nil),
		(*CoolingConfiguration_Manual)(nil),
		(*CoolingConfiguration_Disabled)(nil),
	}
	file_bos_v1_cooling_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_bos_v1_cooling_proto_msgTypes[6].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bos_v1_cooling_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bos_v1_cooling_proto_goTypes,
		DependencyIndexes: file_bos_v1_cooling_proto_depIdxs,
		EnumInfos:         file_bos_v1_cooling_proto_enumTypes,
		MessageInfos:      file_bos_v1_cooling_proto_msgTypes,
	}.Build()
	File_bos_v1_cooling_proto = out.File
	file_bos_v1_cooling_proto_rawDesc = nil
	file_bos_v1_cooling_proto_goTypes = nil
	file_bos_v1_cooling_proto_depIdxs = nil
}
